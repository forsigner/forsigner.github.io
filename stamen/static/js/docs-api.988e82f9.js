(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./docs/api.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),m=t.n(a),o=t("./node_modules/@mdx-js/tag/dist/index.js");function c(e,n){if(null==e)return{};var t,a,m=function(e,n){if(null==e)return{};var t,a,m={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(m[t]=e[t]);return m}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(m[t]=e[t])}return m}n.default=function(e){var n=e.components;c(e,["components"]);return m.a.createElement(o.MDXTag,{name:"wrapper",components:n},m.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"api"}},"API"),m.a.createElement(o.MDXTag,{name:"blockquote",components:n},m.a.createElement(o.MDXTag,{name:"p",components:n,parentName:"blockquote"},"const { consume, mutate, getState } = createStore(initialState)")),m.a.createElement(o.MDXTag,{name:"p",components:n},"Create a store instance, use ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"consume")," to access state, use ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mutate")," to update state. We recommend to create multiple store in your app."),m.a.createElement(o.MDXTag,{name:"p",components:n},"A store recommended in Real world:"),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"import { createStore } from 'stamen'\n\nconst { consume, mutate } = createStore({\n  count: 1,\n})\n\n// an action\nexport function increment() {\n  mutate(state => {\n    state.count++\n  })\n}\n\nexport function decrement() {\n  mutate(state => {\n    state.count--\n  })\n}\n\nexport { consume, mutate }\n")),m.a.createElement(o.MDXTag,{name:"p",components:n},"Keeping your ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"state")," and ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"actions")," in one file is more better;"),m.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"consume"}},m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"consume()")),m.a.createElement(o.MDXTag,{name:"p",components:n},"consume state in Component, Component will re-render if state is mutated;"),m.a.createElement(o.MDXTag,{name:"p",components:n},"First, you need create a store, example:"),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"const { consume, mutate } = createStore({\n  count: 1,\n  info: {\n    name: 'Counter',\n  },\n})\n")),m.a.createElement(o.MDXTag,{name:"p",components:n},m.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Simple usage")),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"<span>{consume(state => state.count)}</span>\n")),m.a.createElement(o.MDXTag,{name:"p",components:n},m.a.createElement(o.MDXTag,{name:"strong",components:n,parentName:"p"},"Using selectors")),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"<span>{consume(state => state.info.name, name => name)}</span>\n")),m.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"mutate"}},m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"mutate()")),m.a.createElement(o.MDXTag,{name:"p",components:n},"Action is a plain function which contain ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mutate()")," in it, you can call it in anywhere, in React lifecycle fn\u3001stateless componet... even out of React component, so you don't need HOC."),m.a.createElement(o.MDXTag,{name:"p",components:n},"State is immutable, but you can generate newState by a mutable API ",m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"mutate"),", thanks to ",m.a.createElement(o.MDXTag,{name:"a",components:n,parentName:"p",props:{href:"https://github.com/mweststrate/immer"}},"immer"),"."),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"function increment() {\n  mutate(state => {\n    state.count++\n  })\n}\n")),m.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"getstate"}},m.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"h2"},"getState()")),m.a.createElement(o.MDXTag,{name:"p",components:n},"Get the current state object."),m.a.createElement(o.MDXTag,{name:"pre",components:n},m.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-js",metaString:""}},"const { getState } = createStore({ count: 1 })\nconst currentState = getState()\n")))}}}]);